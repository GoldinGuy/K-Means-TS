{"version":3,"file":"kmeans-ts.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["export interface KMeans {\r\n  iterations: number;\r\n  k: number;\r\n  indexes: Array<number>;\r\n  centroids: Centroids;\r\n}\r\n\r\nexport type UniMultiDimensionalArray = Array<any>; // needs to be able to handle array of any size\r\nexport type Vector = Array<number>;\r\nexport type Vectors = Array<Vector>;\r\nexport type Centroid = Array<number>;\r\nexport type Centroids = Array<Centroid>;\r\n\r\nconst MAX: number = 10000;\r\n\r\nfunction init(len: number, val: number, vect: Vector): Vector {\r\n  vect = vect || [];\r\n  for (let i = 0; i < len; i++) {\r\n    vect[i] = val;\r\n  }\r\n  return vect;\r\n}\r\n\r\nexport default function kmeans(\r\n  data: UniMultiDimensionalArray,\r\n  k: number,\r\n  init_cent?: String | Array<any>,\r\n  max_it?: number\r\n): KMeans {\r\n  let cents: Centroids = [];\r\n  let indexes: Array<number> = [];\r\n  let cent_moved: boolean = false;\r\n  let iterations: number = max_it || MAX;\r\n  let count: Vector = [];\r\n\r\n  if (!init_cent) {\r\n    let def_indexes: Array<boolean> = [];\r\n    let i: number = 0;\r\n    while (cents.length < k) {\r\n      let idx: number = Math.floor(Math.random() * data.length);\r\n      if (!def_indexes[idx]) {\r\n        def_indexes[idx] = true;\r\n        cents[i++] = data[idx];\r\n      }\r\n    }\r\n  } else if (init_cent === 'kmeans') {\r\n    cents = Cluster.k_means(data, k);\r\n  } else if (init_cent === 'kmeans++') {\r\n    cents = Cluster.k_means_pp(data, k);\r\n  } else {\r\n    cents = Array.from(init_cent);\r\n  }\r\n\r\n  do {\r\n    init(k, 0, count);\r\n    // For each value in data, find nearest centroid (Custom, multidimensional or one-dimensional)\r\n    for (const i in data) {\r\n      let min: number = Infinity;\r\n      let idx: number = 0;\r\n      for (let j = 0; j < k; j++) {\r\n        let dist: number =\r\n          data[0].length > 0\r\n            ? Distance.euclideanDist(data[i], cents[j])\r\n            : Math.abs(data[i][0] - cents[j][0]);\r\n        if (dist <= min) {\r\n          min = dist;\r\n          idx = j;\r\n        }\r\n      }\r\n      indexes[i] = idx; // Idx of centroid\r\n      count[idx]++; // Num values for centroid\r\n    }\r\n\r\n    // Recalculate centroids\r\n    let sum: UniMultiDimensionalArray = [];\r\n    let old: Centroids = [];\r\n    if (data[0].length > 0) {\r\n      for (let j = 0; j < k; j++) {\r\n        sum[j] = init(data[0].length, 0, sum[j]);\r\n        old[j] = cents[j];\r\n      }\r\n    } else {\r\n      for (let j = 0; j < k; j++) {\r\n        sum[j] = 0;\r\n        old[j] = cents[j];\r\n      }\r\n    }\r\n    // If multidimensional, sum values & accumulate value on the centroid for current vector for each centroid\r\n    if (data[0].length > 0) {\r\n      for (let j = 0; j < k; j++) {\r\n        cents[j] = [];\r\n      }\r\n      for (const i in data) {\r\n        for (let h = 0; h < data[0].length; h++) {\r\n          sum[indexes[i]][h] += data[i][h]; // Sum values for current centroid + Current vector\r\n        }\r\n      }\r\n      // Calculate the avg for each centroid\r\n      cent_moved = true;\r\n      for (let j = 0; j < k; j++) {\r\n        /* \r\n                sum[j] |  Sum of centroid values\r\n                old[j] | Old centroid value\r\n                count[j] | Num elements for centroid\r\n                */\r\n        let cent_j: Centroid = cents[j]; // Current centroid\r\n        for (let h = 0; h < data[0].length; h++) {\r\n          cent_j[h] = sum[j][h] / count[j] || 0; // Avg from new centroid\r\n        }\r\n        if (cent_moved) {\r\n          for (let h = 0; h < data[0].length; h++) {\r\n            if (old[j][h] != cent_j[h]) {\r\n              cent_moved = false;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // If one-dimensional, sum values & for each centroid, calculate avg, then determine if centroids moved\r\n    else {\r\n      for (const i in data) {\r\n        let idx: number = indexes[i];\r\n        sum[idx] += data[i];\r\n      }\r\n      for (let j = 0; j < k; j++) {\r\n        cents[j] = [sum[j] / count[j]] || [0];\r\n      }\r\n      cent_moved = true;\r\n      for (let j = 0; j < k; j++) {\r\n        if (old[j] != cents[j]) {\r\n          cent_moved = false;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    cent_moved = cent_moved || --iterations <= 0;\r\n  } while (!cent_moved);\r\n\r\n  const k_means_obj: KMeans = {\r\n    iterations: (max_it || MAX) - iterations,\r\n    k: k,\r\n    indexes: indexes,\r\n    centroids: cents,\r\n  };\r\n  return k_means_obj;\r\n}\r\n\r\nclass Cluster {\r\n  // K-means initial centroid selection\r\n  static k_means(data: Vectors, k: number): Centroids {\r\n    let cents: Centroids = [];\r\n    let t: number = k << 2;\r\n    let map = {};\r\n    while (cents.length < k && t-- > 0) {\r\n      let d: Array<number> = data[Math.floor(Math.random() * data.length)];\r\n      let key: string = data[0].length > 0 ? d.join('_') : `${d}`;\r\n      if (!map[key]) {\r\n        map[key] = true;\r\n        cents.push(d);\r\n      }\r\n    }\r\n    if (cents.length < k) {\r\n      throw Error('Failed to initialize clusters');\r\n    } else return cents;\r\n  }\r\n\r\n  // K-means++ initial centroid selection\r\n  static k_means_pp(data: Vectors, k: number): Centroids {\r\n    const distance: Function = data[0].length\r\n      ? Distance.euclideanDist\r\n      : Distance.dist;\r\n    let cents: Centroids = [];\r\n    let map = {};\r\n    // Initial random centroid\r\n    let c: Centroid = data[Math.floor(Math.random() * data.length)];\r\n    cents.push(c);\r\n    map[data[0].length > 0 ? c.join('_') : `${c}`] = true;\r\n    // Get next centroids\r\n    while (cents.length < k) {\r\n      // Find min distances between current centroids and data points\r\n      let distances: Array<number> = [];\r\n      let probs: Array<{\r\n        i: string;\r\n        v: Vector;\r\n        pr: number;\r\n        cs: number;\r\n      }> = [];\r\n      let d_sum: number = 0;\r\n      for (const i in data) {\r\n        let min: number = Infinity;\r\n        for (const j in cents) {\r\n          let dist: number = distance(data[i], cents[j]);\r\n          if (dist <= min) min = dist;\r\n        }\r\n        distances[i] = min;\r\n      }\r\n      // Sum min distances\r\n      for (const i in data) {\r\n        d_sum += distances[i];\r\n      }\r\n      // Probabilities/cumulative prob\r\n      for (const i in data) {\r\n        probs[i] = { i: i, v: data[i], pr: distances[i] / d_sum, cs: 0 };\r\n      }\r\n      probs.sort((a, b) => a.pr - b.pr);\r\n      // Cumulative probs\r\n      probs[0].cs = probs[0].pr;\r\n      for (let i = 1; i < data.length; i++) {\r\n        probs[i].cs = probs[i - 1].cs + probs[i].pr;\r\n      }\r\n      // Gets items where cum sum >= random num\r\n      let rnd: number = Math.random();\r\n      let idx: number = 0;\r\n      while (idx < data.length - 1 && probs[idx++].cs < rnd);\r\n      cents.push(probs[idx - 1].v);\r\n    }\r\n    return cents;\r\n  }\r\n}\r\n\r\nclass Distance {\r\n  // Absolute distance between two values\r\n  // d(x, y, z) = z ? || x - y || : || x - y || * || x - y ||\r\n  static dist(x: number, y: number, sqrt?: number): number {\r\n    const d: number = Math.abs(x - y);\r\n    return sqrt ? d : d * d;\r\n  }\r\n  // The \"ordinary\" straight-line distance between two points in Euclidean space\r\n  // ed((x1, y1), (x2, y2)) = || (x1, y1) – (x2, y2) ||\r\n  static euclideanDist(x: Centroid, y: Centroid): number {\r\n    let sum: number = 0;\r\n    for (const i in x) {\r\n      const d: number = (x[i] || 0) - (y[i] || 0);\r\n      sum += d * d;\r\n    }\r\n    return sum;\r\n  }\r\n  // The distance between two points measured along axes at right angles\r\n  // md((x1, y1), (x2, y2)) = | x1 – x2 | + | y1 – y2 |\r\n  static manhattanDist(x: Centroid, y: Centroid): number {\r\n    let sum: number = 0;\r\n    let d: number = 0;\r\n    for (const i in x) {\r\n      d = (x[i] || 0) - (y[i] || 0);\r\n      sum += d >= 0 ? d : -d;\r\n    }\r\n    return sum;\r\n  }\r\n}\r\nexport { Cluster, Distance };\r\n"],"names":["MAX","init","len","val","vect","i","kmeans","data","k","init_cent","max_it","cents","indexes","cent_moved","iterations","count","def_indexes","length","idx","Math","floor","random","Cluster","k_means","k_means_pp","Array","from","min","Infinity","j","dist","Distance","euclideanDist","abs","sum","old","h","cent_j","k_means_obj","centroids","t","map","d","key","join","push","Error","distance","c","distances","probs","d_sum","v","pr","cs","sort","a","b","rnd","x","y","sqrt","manhattanDist"],"mappings":"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"}